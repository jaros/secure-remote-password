/* eslint-disable new-cap */
/* eslint-env jest */

const forge = require('node-forge')
forge.options.usePureJavaScript = true

describe('RSA encryption', () => {
  test('sha1 encrypt', () => {
    const h = forge.md.sha1.create()
    h.update('abc')
    const res = h.digest().toHex()
    expect(res).toBe('a9993e36 4706816a ba3e2571 7850c26c 9cd0d89d'.replace(/\s+/g, ''))
  })

  test('sha1 encrypt 2', () => {
    const h = forge.md.sha1.create()
    h.update('')
    const res = h.digest().toHex()
    expect(res).toBe('da39a3ee 5e6b4b0d 3255bfef 95601890 afd80709'.replace(/\s+/g, ''))
  })

  test('encrypt with forge', () => {
    // generate a random key and IV for AES-256 bit
    let key = forge.random.getBytesSync(32) // bytes
    let iv = forge.random.getBytesSync(32) // bytes

    let someBytes = 'hello world' // or file bytes here

// encrypt some bytes
    let cipher = forge.cipher.createCipher('AES-CBC', key)
    cipher.start({iv: iv})
    cipher.update(forge.util.createBuffer(someBytes)) // put file here
    cipher.finish()
    let encrypted = cipher.output
// outputs encrypted hex
    console.log(encrypted.toHex())
  })

  test('generate RSA', () => {
    const {pki, util, asn1} = forge

    let keypair = pki.rsa.generateKeyPair({bits: 4096, e: 0x10001})

    const hexPublicKey = asn1.toDer(pki.publicKeyToAsn1(keypair.publicKey)).toHex()
    console.log('hex pub key: ', hexPublicKey)

    const pubKey = pki.publicKeyFromAsn1(asn1.fromDer(util.createBuffer(util.binary.hex.decode(hexPublicKey))))

    const hexPrivateKey = asn1.toDer(pki.privateKeyToAsn1(keypair.privateKey)).toHex()
    console.log('hex priv key: ', hexPrivateKey)
    const privKey = pki.privateKeyFromAsn1(asn1.fromDer(util.createBuffer(util.binary.hex.decode(hexPrivateKey))))

    let encrypted = pubKey.encrypt('test')
    console.log('encrypted', util.binary.hex.encode(encrypted))
    //
    let decrypted = privKey.decrypt(encrypted)
    console.log('decrypted', decrypted)
  })

  const hexPublic = '30820222300d06092a864886f70d01010105000382020f003082020a02820201009629bd2d8b8a0d8f950ae22bdafc67b0fe0dbcf61d1c8b012f4ee219f2c89b80d3d234968a20c7b7a871168dc369eac96e63f2b7feca86d1e59a2e72b48cfe632551ba577c587bb860baa48f32e8a0ce230b18d5d9a81c6113d3fe0a0007ec7484cdcf8684987513c5670470f2aacaa20e6272edaaae4c603163c9ffab518ea856361b7ad553d6a148cec744ade89ef6e0a090f0e9e8b995c61ac6b49782ea7643e29573a2e1edc56fe3c8fb0bcb7b1e6e228504e0556038e2f9cbe46d52d0c919bf63b669aefcf3e46b1edf01fa89ed92d67de0048883bc2c629a4af2b8f891c6b96b54ad40bb9e0d1a8ab4b2747945f55a9517532d1dcb29554f10409b9bbc3a49563ac7f9e0c7693dac4a85a96ee356aa20144aac466e28d4c623671c1756431a684e0097989c5024583a8a598918da58ccefddbafda58c8eea4cde7c754df61c97d62a878c17df6867326645826e34b87deb0e5a91808c09cfa29b33813b909729373f817e0b096f20d7aeece04096ac137ce67626c9b6a0ef80f176f89f2d437c0ca634d239a52808cb3f68f00780b5534613bb3a98247c52c8fa7640b361de952e2e559094e42de8d64d07ad8f97f3b51e9d59c6642ac075d85047fc29f62d5f680e48feef0e4067dfe198adb4706569ed93233a5d24cce8812adbc2c7f772fb680b3d59b279ff70a90e910da09894af3dbc8b9541296c82c25025b9b50203010001'
  const hexPrivate = '3082092702010002820201009629bd2d8b8a0d8f950ae22bdafc67b0fe0dbcf61d1c8b012f4ee219f2c89b80d3d234968a20c7b7a871168dc369eac96e63f2b7feca86d1e59a2e72b48cfe632551ba577c587bb860baa48f32e8a0ce230b18d5d9a81c6113d3fe0a0007ec7484cdcf8684987513c5670470f2aacaa20e6272edaaae4c603163c9ffab518ea856361b7ad553d6a148cec744ade89ef6e0a090f0e9e8b995c61ac6b49782ea7643e29573a2e1edc56fe3c8fb0bcb7b1e6e228504e0556038e2f9cbe46d52d0c919bf63b669aefcf3e46b1edf01fa89ed92d67de0048883bc2c629a4af2b8f891c6b96b54ad40bb9e0d1a8ab4b2747945f55a9517532d1dcb29554f10409b9bbc3a49563ac7f9e0c7693dac4a85a96ee356aa20144aac466e28d4c623671c1756431a684e0097989c5024583a8a598918da58ccefddbafda58c8eea4cde7c754df61c97d62a878c17df6867326645826e34b87deb0e5a91808c09cfa29b33813b909729373f817e0b096f20d7aeece04096ac137ce67626c9b6a0ef80f176f89f2d437c0ca634d239a52808cb3f68f00780b5534613bb3a98247c52c8fa7640b361de952e2e559094e42de8d64d07ad8f97f3b51e9d59c6642ac075d85047fc29f62d5f680e48feef0e4067dfe198adb4706569ed93233a5d24cce8812adbc2c7f772fb680b3d59b279ff70a90e910da09894af3dbc8b9541296c82c25025b9b502030100010282020009946e1a3abdbaf1bf0b6bb46a8b11be6be6ca7855111e191c4087122ab7fb9bb367c4ad19f0cf6cfb1503e055682b6f605886029101b0aa3160adb7e9a6d90fd030af97a73a29e2706157e03eda32701432400a5c916a061372c1d1378149e781157438dbbab23569b191c9f6e1487e2036cda835ec5ab9044d9e746e248cda566dab4121dcf06367b6b165c34684e5b11ced424159f48506976cb7d6b6a668971a1c78bd1a76c5d2c6906adbacc6950167b85ec04512176efb8ab36efa0a91d9cfa8f7d9342db50d8c7bf2b4389c960879209cab0d5e8221bec4a3256b0188a349eefbfef5934299096971efb4988c0b041560e0908f4707c306813dedef7870979ca207b684d3962a00eced79951d228673d73fa0db3ed24b32af988e2b2d959eb8c4096ba4891121e6353e8ebbc1b0a463cb987352261ffd4aac51151cfb8fe33882829b64a008987f903edd2506e6003e45acc594814fcd1346791b3a315e3c98232cee8fd61cbe69cf64d3f64f8a855978491a809aad0bcc08083584f3b2db2043ee684f07a358631bbc338abf4947b9e08b449751af7cbb8b88553b4f1be162d897376205ba8149876aee3c5f4f2898c69ea61fdf5f28dba8db14442b12d676d8ca1a29b7da887664398e9636fc175f914855a2522071cac5e7097a72ae3030df72eb0e8a416398d6b44af2bec4555f0aec2b92c4343f8098f556f3dd0282010100d23aa4cdf173941d567a04d559697293d87a7ee9b62c1efd3c77028e2300a25517c2d4176b189b5e02565ffde38a8981d5f7308c2eb119409b1b68b15eb2cab84f2543923e60b90fcd2680c528cdfa287ccfa886d173a21f78072c6b8db58ddc91d4edb72c3753a60f99d849aec735b000c97a30af44dc57658650fd55e8fe72e2ce048ddc44a44f3109af0fd069f617a98d5e3639f46c424d190820803afe3df0bacee5e61308e7940c64c7d7f31f042513af5f61d923dc7bb49a7aa373dbbbea872331f520a35e4e6afa0d9ed7fa436ee4ca320bc7b5b693a7c405ff204cf63a73700a6a4160d1d0188a6c0bb74d3c937e9980d14aeb693815e3f2128f610b0282010100b6db3f21bfe5b9185914a7b4f307cd5d6a0170b0e37ae564f3586086cd177e5398add3d866dbe07bbcc11735ceea49971d7afe8a7cf5484b188d1eedfd77200ada697f63246d685805fa9e8f229036e55776ee221b8437643e4bcd4ea9f38dd0fa5a3df6ac226175a7eff20ca5237419df3ea08b8d89f8055995fddbd30e4ddc36effab4d02b3d2a4af88b5209f3588bf94295195515927f4e355e1ce1c8e7b22b7ddc14d88494f4faf5bc1973536bbbaa3b71214bbe71d2810c8a9f34df705fe6b1f306d512d0e14026af5b1c8ea1194e81cee674df0f598e07011bf8856d1d70a72fc9e529aeb5af5c431ad64c00d24a05a7046bfcd33f8abc649e094d883f028201003bfab34e7696ed2939a4f28014547b76270b3bee5e25546a17b834a86ce01f707ba9006df6063d3da31915a610275478109dc7e216e83c362c8ab361f78cb73dc286f532624da23f19dee45a5bfbf86558c6be644899df256f4f4ca31af933923ca12d79574a29b975360579703e31d917406476436b381a4f42f5147250595859d141875fd2cdb6325d7aeede1d7d32df1310501454e216407ce5ceb00724c6734a39016a94ffb3628feea8fdb9c59d9f1e70a89bf821bd242630f4d0719bbd8f7a22d67c0365d8e032b148f58ad5422bff6698c4b7a3e68556161d47dee55652f2e082783252f74991d6dc60b3597bf0f0ebc6ceefbb1e77fbf6def7e0a46502820100723bb9ceedc127c70c2f992db3fe15cfdbdf96750b47c573318aee928821bb2ba26045ce15441b9371b1f73c084dd9376c955fdb48813b6e9ea1dac6b6e7eabe9cfff7330a98c6ece69f50dafeaeb57cc50d696b296189f137f1c70af3a551dd51e97a7855c50cb9a1f686725be03031d183a06c4e39f915ee87839606de12ca161009c157a30b8d1654fb447f2ee50c5ce5b99b9fc9e04163ac7764f7b0b8fe57a9430a4ad158f54aaaa59e08abfecbb867761f64e04edf40fb82c63f13af7259fea562894e3debda55d08acce655c2278774a8082f29b9babea974bde72ce98d6d04afce5821eb22e8328bdb8093aacbcf882d7d00ef3fecfe10a5a20e2ba5028201003bd7853b892b68761b4fe332ad80c15c8258212d8947ffc9f32ccdffdd1177237db3a51d7edd4545f8d4b1f0bb98766082282670a7b06339cc2a24f57c14a64caac333ed905dd38982f7de3d5fe1694d71be02fd40ad4b4848ef7254a8c35fd59fba9029fe3e2e06e5b2baeb45ca12746133de1d6292bc9b27bd449c519afae9b5d606df7a79c15aec5ae87d8164e2850ab2334de8977101f2eea7bd9fd43244a381a0181e26bb16bffc9b23b07c860bdeed30576cf04aadbfaf103113e5b1c65ac940f6b6069b4ffbdea0fb642e9955fefd1e1d8b84934fa7348f57161cab33964d7971682b51b7687ef6fe2bb507c18ea4cc56eab5769e897bf1890dad10c2'

  test('reuse RSA', () => {
    const {pki, util, asn1} = forge

    const pubKey = pki.publicKeyFromAsn1(asn1.fromDer(util.createBuffer(util.binary.hex.decode(hexPublic))))

    const encrypted = pubKey.encrypt('home_ho')
    console.log('encrypted home_ho', encrypted)

    const privKey = pki.privateKeyFromAsn1(asn1.fromDer(util.createBuffer(util.binary.hex.decode(hexPrivate))))

    const decrypted = privKey.decrypt(encrypted)
    console.log(decrypted)
  })
})
